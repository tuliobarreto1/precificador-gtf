
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { Session, User } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { getCurrentProfile, getAdminUser, signOutAdmin } from '@/lib/api';

// Tipo para usu√°rios administradores
interface AdminUser {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'supervisor' | 'user';
}

interface AuthContextProps {
  session: Session | null;
  user: User | null;
  adminUser: AdminUser | null;  // Adicionando usu√°rio admin
  profile: any | null;
  isLoading: boolean;
  signOut: () => Promise<void>;
  refreshAuth: () => void;  // Nova fun√ß√£o para for√ßar atualiza√ß√£o
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [adminUser, setAdminUser] = useState<AdminUser | null>(null);  // Estado para usu√°rio admin
  const [profile, setProfile] = useState<any | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Fun√ß√£o para verificar usu√°rio admin
  const checkAdminUser = () => {
    const admin = getAdminUser();
    console.log('üîç Verificando usu√°rio admin:', admin);
    setAdminUser(admin);
    return admin;
  };

  // Fun√ß√£o para for√ßar atualiza√ß√£o do estado de autentica√ß√£o
  const refreshAuth = () => {
    console.log('üîÑ For√ßando atualiza√ß√£o do estado de autentica√ß√£o...');
    const admin = checkAdminUser();
    if (admin) {
      setIsLoading(false);
    } else {
      // Verificar sess√£o Supabase se n√£o h√° admin
      supabase.auth.getSession().then(({ data: { session: currentSession } }) => {
        setSession(currentSession);
        setUser(currentSession?.user ?? null);
        setIsLoading(false);
      });
    }
  };

  useEffect(() => {
    console.log('üöÄ Inicializando AuthProvider...');
    
    // Verificar se h√° um usu√°rio admin logado primeiro
    const admin = checkAdminUser();
    if (admin) {
      console.log('üë§ Usu√°rio admin encontrado:', admin);
      setIsLoading(false);
      return;
    }
    
    // Configurar o listener de mudan√ßa de estado de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, currentSession) => {
        console.log('üì° Evento de autentica√ß√£o:', event, currentSession?.user?.id);
        setSession(currentSession);
        setUser(currentSession?.user ?? null);
        
        if (currentSession?.user) {
          // Buscar o perfil do usu√°rio, mas com setTimeout para evitar deadlock
          setTimeout(async () => {
            try {
              const { success, profile } = await getCurrentProfile();
              console.log('üë§ Perfil obtido:', success, profile);
              if (success && profile) {
                setProfile(profile);
              }
            } catch (error) {
              console.error('‚ùå Erro ao buscar perfil:', error);
            } finally {
              setIsLoading(false);
            }
          }, 0);
        } else {
          // Se n√£o h√° usu√°rio Supabase, verificar se h√° admin
          const currentAdmin = checkAdminUser();
          if (!currentAdmin) {
            setProfile(null);
            setIsLoading(false);
          }
        }
      }
    );

    // Verificar se j√° existe uma sess√£o Supabase
    supabase.auth.getSession().then(({ data: { session: currentSession } }) => {
      console.log('üìã Sess√£o atual:', currentSession?.user?.id);
      setSession(currentSession);
      setUser(currentSession?.user ?? null);
      
      if (currentSession?.user) {
        getCurrentProfile().then(({ success, profile }) => {
          console.log('üë§ Perfil obtido (inicial):', success, profile);
          if (success && profile) {
            setProfile(profile);
          }
          setIsLoading(false);
        }).catch(error => {
          console.error('‚ùå Erro ao buscar perfil inicial:', error);
          setIsLoading(false);
        });
      } else {
        // Se n√£o h√° usu√°rio Supabase, s√≥ verificar admin
        if (!admin) {
          setIsLoading(false);
        }
      }
    }).catch(error => {
      console.error('‚ùå Erro ao buscar sess√£o:', error);
      setIsLoading(false);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Listener para mudan√ßas no localStorage (para detectar login admin)
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'admin_user') {
        console.log('üì¶ Mudan√ßa detectada no localStorage para admin_user');
        refreshAuth();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  const signOut = async () => {
    // Fazer logout do usu√°rio admin, se houver
    if (adminUser) {
      await signOutAdmin();
      setAdminUser(null);
    }
    
    // Fazer logout do usu√°rio Supabase, se houver
    if (session) {
      await supabase.auth.signOut();
    }
  };

  return (
    <AuthContext.Provider value={{ session, user, adminUser, profile, isLoading, signOut, refreshAuth }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
