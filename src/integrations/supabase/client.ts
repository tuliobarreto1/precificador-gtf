// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { v4 as uuidv4 } from 'uuid';

const SUPABASE_URL = "https://pvsjjqmsoauuxxfgdhfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB2c2pqcW1zb2F1dXh4ZmdkaGZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxMTI5NTUsImV4cCI6MjA1ODY4ODk1NX0.Mp6zyYRkHfHZTkBIkV_lpYv8nkAkJ9i7cI1y8dGGF6M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Fun√ß√£o para salvar cliente no Supabase
export async function saveClientToSupabase(client: any) {
  try {
    console.log('üîç Tentando salvar cliente:', {
      id: client.id,
      name: client.name,
      document: client.document,
      email: client.email
    });

    // Converter ID para UUID se necess√°rio
    const clientId = convertToValidUuid(client.id);

    const { data, error } = await supabase
      .from('clients')
      .upsert({
        id: clientId,
        name: client.name,
        document: client.document || null,
        email: client.email || null,
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao salvar cliente no Supabase:', error);
      return { success: false, error };
    }

    console.log('‚úÖ Cliente salvo com sucesso:', data);
    return { success: true, data };
  } catch (error) {
    console.error('‚ùå Erro inesperado ao salvar cliente:', error);
    return { success: false, error };
  }
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof localStorage !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true
  }
});

// Fun√ß√£o para verificar a conex√£o com o Supabase
export async function checkSupabaseConnection() {
  try {
    console.log('Verificando conex√£o com o Supabase...');
    const { data, error } = await supabase.from('vehicle_groups').select('id').limit(1);
    
    if (error) {
      console.error('Erro ao conectar ao Supabase:', error);
      throw error;
    }
    
    console.log('Conex√£o com o Supabase estabelecida com sucesso:', data);
    return { success: true, data };
  } catch (error) {
    console.error('Erro ao conectar ao Supabase:', error);
    return { success: false, error };
  }
}

// Fun√ß√£o para converter IDs de timestamp para formato UUID
const convertToValidUuid = (id: string | number): string => {
  // Verifica se j√° √© um UUID v√°lido
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (typeof id === 'string' && uuidRegex.test(id)) {
    return id;
  }
  
  // Caso contr√°rio, gerar um novo UUID
  return uuidv4();
};

// Fun√ß√£o para salvar or√ßamento no Supabase
export async function saveQuoteToSupabase(quote: any) {
  try {
    // Obter o usu√°rio logado (ou do Supabase Auth ou do sistema admin)
    let userId = null;
    
    // Verificar se h√° um usu√°rio admin logado
    const adminUserStr = localStorage.getItem('admin_user');
    if (adminUserStr) {
      const adminUser = JSON.parse(adminUserStr);
      userId = adminUser.id;
    } else {
      // Verificar se h√° um usu√°rio Supabase logado
      const { data: { session } } = await supabase.auth.getSession();
      if (session?.user) {
        userId = session.user.id;
      }
    }
    
    console.log('üîç Detalhando dados do or√ßamento para salvar:', {
      clientId: quote.clientId,
      contractMonths: quote.contractMonths,
      monthlyKm: quote.monthlyKm,
      operationSeverity: quote.operationSeverity || 3,
      hasTracking: quote.hasTracking || false,
      totalCost: quote.totalCost || 0,
      id: quote.id || 'novo',
      veiculos: quote.vehicles?.length || 0,
      userId: userId
    });
    
    // Verifica se o or√ßamento tem um ID v√°lido formatado como UUID 
    const isValidUuid = !!quote.id && 
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(quote.id);
    
    // Primeiro, salvar o cliente
    const clientResult = await saveClientToSupabase(quote.client);
    if (!clientResult.success) {
      console.error('‚ùå Falha ao salvar cliente:', clientResult.error);
      return { success: false, error: clientResult.error };
    }

    // Gera ou mant√©m o ID do or√ßamento no formato UUID
    const quoteId = isValidUuid ? quote.id : uuidv4();
    console.log(`ID do or√ßamento a ser usado: ${quoteId} (era: ${quote.id})`);
    
    // Usar o ID do cliente retornado pelo Supabase
    const clientUuid = clientResult.data.id;
    
    if (isValidUuid) {
      // Atualizar or√ßamento existente
      console.log(`Atualizando or√ßamento existente com ID ${quoteId}`);
      const { data, error } = await supabase
        .from('quotes')
        .update({
          client_id: clientUuid,
          contract_months: quote.contractMonths,
          monthly_km: quote.monthlyKm,
          operation_severity: quote.operationSeverity,
          has_tracking: quote.hasTracking,
          total_value: quote.totalCost || 0,
          status: 'active',
          title: `Or√ßamento ${new Date().toLocaleDateString('pt-BR')}`,
          created_by: userId // Adicionar ID do usu√°rio
        })
        .eq('id', quoteId)
        .select();
      
      if (error) {
        console.error('‚ùå Erro ao atualizar or√ßamento no Supabase:', error);
        return { success: false, error };
      }
      
      console.log('‚úÖ Or√ßamento atualizado com sucesso:', data);
      return { success: true, data };
    } else {
      // Criar novo or√ßamento
      console.log('Inserindo novo or√ßamento no Supabase');
      const { data, error } = await supabase
        .from('quotes')
        .insert({
          id: quoteId,
          client_id: clientUuid,
          contract_months: quote.contractMonths,
          monthly_km: quote.monthlyKm,
          operation_severity: quote.operationSeverity || 3,
          has_tracking: quote.hasTracking || false,
          total_value: quote.totalCost || 0,
          status: 'active',
          title: `Or√ßamento ${new Date().toLocaleDateString('pt-BR')}`,
          created_by: userId // Adicionar ID do usu√°rio
        })
        .select();
      
      if (error) {
        console.error('‚ùå Erro ao inserir or√ßamento no Supabase:', error);
        console.error('Detalhes do erro:', error.details, error.message, error.hint);
        return { success: false, error };
      }
      
      console.log('‚úÖ Or√ßamento salvo com sucesso:', data);
      
      if (data && data[0] && quote.vehicles && quote.vehicles.length > 0) {
        // Salvar os itens do or√ßamento
        const savedQuoteId = data[0].id;
        console.log(`Salvando ${quote.vehicles.length} ve√≠culos para o or√ßamento ${savedQuoteId}`);
        
        // Preparar os itens para inser√ß√£o
        const quoteItems = quote.vehicles.map((item: any) => ({
          quote_id: savedQuoteId,
          vehicle_id: item.vehicle && item.vehicle.id ? convertToValidUuid(item.vehicle.id) : convertToValidUuid(item.vehicleId),
          monthly_value: item.totalCost || 0,
          contract_months: quote.contractMonths,
          monthly_km: quote.monthlyKm,
          operation_severity: quote.operationSeverity || 3,
          has_tracking: quote.hasTracking || false
        }));
        
        console.log('Itens do or√ßamento a serem inseridos:', quoteItems);
        
        const { error: itemsError } = await supabase
          .from('quote_items')
          .insert(quoteItems);
          
        if (itemsError) {
          console.error('‚ùå Erro ao inserir itens do or√ßamento:', itemsError);
          console.error('Detalhes do erro:', itemsError.details, itemsError.message, itemsError.hint);
          // N√£o falharemos todo o processo se apenas os itens falharem
        } else {
          console.log('‚úÖ Itens do or√ßamento salvos com sucesso');
        }
      }
      
      return { success: true, data };
    }
  } catch (error) {
    console.error('‚ùå Erro inesperado ao salvar or√ßamento:', error);
    return { success: false, error };
  }
}

// Fun√ß√£o para buscar or√ßamentos no Supabase
export async function getQuotesFromSupabase() {
  try {
    console.log('Buscando or√ßamentos no Supabase...');
    
    // Buscar or√ßamentos com relacionamentos de forma mais completa
    const { data, error } = await supabase
      .from('quotes')
      .select(`
        *,
        client:client_id(*),
        items:quote_items(
          *,
          vehicle:vehicle_id(*)
        )
      `)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Erro ao buscar or√ßamentos no Supabase:', error);
      return { success: false, error, quotes: [] };
    }
    
    console.log(`Encontrados ${data?.length || 0} or√ßamentos no Supabase`);
    if (data && data.length > 0) {
      console.log('Primeiro or√ßamento encontrado:', data[0]);
      if (data[0].items && data[0].items.length > 0) {
        console.log('Detalhes do primeiro item do or√ßamento:', data[0].items[0]);
        console.log('Detalhes do ve√≠culo do primeiro item:', data[0].items[0].vehicle);
      } else {
        console.log('Primeiro or√ßamento n√£o possui itens');
      }
    }
    
    return { success: true, quotes: data || [] };
    
  } catch (error) {
    console.error('Erro inesperado ao buscar or√ßamentos:', error);
    return { success: false, error, quotes: [] };
  }
}

// Fun√ß√£o para buscar um √∫nico or√ßamento pelo ID
export async function getQuoteByIdFromSupabase(quoteId: string) {
  try {
    console.log(`Buscando or√ßamento com ID ${quoteId} no Supabase...`);
    
    const { data, error } = await supabase
      .from('quotes')
      .select(`
        *,
        client:client_id(*),
        items:quote_items(
          *,
          vehicle:vehicle_id(*)
        )
      `)
      .eq('id', quoteId)
      .single();
    
    if (error) {
      console.error(`Erro ao buscar or√ßamento com ID ${quoteId}:`, error);
      return { success: false, error };
    }
    
    console.log('Or√ßamento encontrado:', data);
    if (data.items && data.items.length > 0) {
      console.log('Itens do or√ßamento:', data.items.length);
      console.log('Primeiro ve√≠culo:', data.items[0].vehicle);
    }
    
    return { success: true, quote: data };
    
  } catch (error) {
    console.error('Erro inesperado ao buscar or√ßamento por ID:', error);
    return { success: false, error };
  }
}

// Fun√ß√£o para buscar ve√≠culos do Supabase
export async function getVehiclesFromSupabase() {
  try {
    console.log('Buscando ve√≠culos no Supabase...');
    
    const { data, error } = await supabase
      .from('vehicles')
      .select('*')
      .order('brand', { ascending: true });
    
    if (error) {
      console.error('Erro ao buscar ve√≠culos:', error);
      return { success: false, error, vehicles: [] };
    }
    
    console.log(`Encontrados ${data?.length || 0} ve√≠culos no Supabase`);
    return { success: true, vehicles: data || [] };
    
  } catch (error) {
    console.error('Erro inesperado ao buscar ve√≠culos:', error);
    return { success: false, error, vehicles: [] };
  }
}
