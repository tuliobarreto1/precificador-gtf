// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { v4 as uuidv4 } from 'uuid';

const SUPABASE_URL = "https://pvsjjqmsoauuxxfgdhfg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB2c2pqcW1zb2F1dXh4ZmdkaGZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxMTI5NTUsImV4cCI6MjA1ODY4ODk1NX0.Mp6zyYRkHfHZTkBIkV_lpYv8nkAkJ9i7cI1y8dGGF6M";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof localStorage !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true
  }
});

// Função para verificar a conexão com o Supabase
export async function checkSupabaseConnection() {
  try {
    const { data, error } = await supabase.from('vehicles').select('id').limit(1);
    
    if (error) throw error;
    
    return { success: true, data };
  } catch (error) {
    return { success: false, error };
  }
}

// Função para buscar veículos do Supabase
export async function getVehiclesFromSupabase() {
  try {
    console.log("Buscando veículos do Supabase...");
    
    const { data, error } = await supabase
      .from('vehicles')
      .select('*')
      .order('brand', { ascending: true });
      
    if (error) {
      console.error("Erro ao buscar veículos:", error);
      return { success: false, error, vehicles: [] };
    }
    
    console.log(`Recuperados ${data?.length || 0} veículos com sucesso`);
    return { success: true, vehicles: data || [] };
  } catch (error) {
    console.error("Erro inesperado ao buscar veículos:", error);
    return { success: false, error, vehicles: [] };
  }
}

// Função para converter IDs de timestamp para formato UUID
const convertToValidUuid = (id: string | number): string => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (typeof id === 'string' && uuidRegex.test(id)) {
    return id;
  }
  return uuidv4();
};

// Função para salvar cliente no Supabase
export async function saveClientToSupabase(client: any) {
  try {
    const clientId = convertToValidUuid(client.id);

    const { data, error } = await supabase
      .from('clients')
      .upsert({
        id: clientId,
        name: client.name,
        document: client.document || null,
        email: client.email || null,
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      return { success: false, error };
    }

    return { success: true, data };
  } catch (error) {
    return { success: false, error };
  }
}

// Função para salvar orçamento no Supabase
export async function saveQuoteToSupabase(quote: any) {
  try {
    let userId = null;
    const adminUserStr = localStorage.getItem('admin_user');
    if (adminUserStr) {
      const adminUser = JSON.parse(adminUserStr);
      userId = adminUser.id;
    } else {
      const { data: { session } } = await supabase.auth.getSession();
      if (session?.user) {
        userId = session.user.id;
      }
    }
    
    const clientResult = await saveClientToSupabase(quote.client);
    if (!clientResult.success) {
      return { success: false, error: clientResult.error };
    }

    const isValidUuid = !!quote.id && /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(quote.id);
    const quoteId = isValidUuid ? quote.id : uuidv4();
    const clientUuid = clientResult.data.id;
    
    // Dados principais do orçamento
    const quoteData: any = {
      id: quoteId,
      client_id: clientUuid,
      contract_months: quote.contractMonths,
      monthly_km: quote.monthlyKm,
      operation_severity: quote.operationSeverity || 3,
      has_tracking: quote.hasTracking || false,
      total_value: quote.totalCost || 0,
      status: 'active',
      title: `Orçamento ${new Date().toLocaleDateString('pt-BR')}`,
      created_by: userId
    };
    
    const { data, error } = await supabase
      .from('quotes')
      .upsert(quoteData)
      .select();

    if (error) {
      return { success: false, error };
    }
    
    // Salvar veículos associados ao orçamento
    if (quote.vehicles && quote.vehicles.length > 0) {
      for (const vehicleItem of quote.vehicles) {
        const vehicle = vehicleItem.vehicle;
        
        // Verificar se o veículo já existe no Supabase pela placa
        let vehicleId = null;
        if (vehicle.plateNumber) {
          const { data: existingVehicles } = await supabase
            .from('vehicles')
            .select('id')
            .eq('plate_number', vehicle.plateNumber)
            .limit(1);
            
          if (existingVehicles && Array.isArray(existingVehicles) && existingVehicles.length > 0) {
            vehicleId = existingVehicles[0].id;
          }
        }
        
        // Se o veículo não existir, criar um novo
        if (!vehicleId) {
          const { data: newVehicle, error: vehicleError } = await supabase
            .from('vehicles')
            .insert({
              brand: vehicle.brand || 'Não especificado',
              model: vehicle.model || 'Não especificado',
              year: vehicle.year || new Date().getFullYear(),
              value: vehicle.value || 0,
              plate_number: vehicle.plateNumber || null,
              is_used: vehicle.isUsed || false,
              group_id: vehicle.groupId || null
            })
            .select()
            .single();
            
          if (vehicleError) {
            console.error("Erro ao salvar veículo:", vehicleError);
            continue;
          }
          
          vehicleId = newVehicle.id;
        }
        
        // Salvar relação veículo-orçamento na tabela quote_vehicles
        const monthlyValue = vehicleItem.params ? 
          (quote.totalCost / quote.vehicles.length) : // Distribuir igualmente se não tiver valor específico
          (vehicle.monthlyValue || 0);
          
        await supabase
          .from('quote_vehicles')
          .insert({
            quote_id: quoteId,
            vehicle_id: vehicleId,
            monthly_value: monthlyValue,
            monthly_km: vehicleItem.params?.monthlyKm || quote.monthlyKm,
            contract_months: vehicleItem.params?.contractMonths || quote.contractMonths,
            operation_severity: vehicleItem.params?.operationSeverity || quote.operationSeverity || 3,
            has_tracking: vehicleItem.params?.hasTracking || quote.hasTracking || false
          });
      }
    }
    
    return { success: true, data };
  } catch (error) {
    return { success: false, error };
  }
}

// Função para buscar orçamentos no Supabase
export async function getQuotesFromSupabase() {
  try {
    console.log("Buscando orçamentos do Supabase...");
    
    const { data, error } = await supabase
      .from('quotes')
      .select(`
        *,
        client:client_id(*)
      `)
      .order('created_at', { ascending: false });
      
    if (error) {
      throw error;
    }
    
    // Buscar veículos para cada orçamento
    const quotes = Array.isArray(data) ? data : [];
    for (const quote of quotes) {
      const { data: vehiclesData } = await supabase
        .from('quote_vehicles')
        .select(`
          *,
          vehicle:vehicle_id(*)
        `)
        .eq('quote_id', quote.id);
        
      // Adicionar veículos ao objeto de orçamento como propriedade não-tipada
      (quote as any).vehicles = vehiclesData || [];
    }
    
    console.log("Orçamentos recuperados:", quotes.length);
    return { success: true, quotes };
  } catch (error) {
    console.error("Erro inesperado ao buscar orçamentos:", error);
    return { success: false, error, quotes: [] };
  }
}

// Função para buscar um único orçamento pelo ID
export async function getQuoteByIdFromSupabase(quoteId: string) {
  try {
    console.log(`Buscando orçamento com ID: ${quoteId}`);
    
    const { data, error } = await supabase
      .from('quotes')
      .select(`
        *,
        client:client_id(*)
      `)
      .eq('id', quoteId)
      .single();
      
    if (error) {
      console.error("Erro ao buscar orçamento por ID:", error);
      return { success: false, error };
    }
    
    // Buscar veículos associados a este orçamento
    if (data) {
      const { vehicles } = await getQuoteVehicles(quoteId);
      
      if (vehicles && Array.isArray(vehicles)) {
        (data as any).vehicles = vehicles;
        console.log(`Veículos associados ao orçamento ${quoteId}:`, vehicles);
      } else {
        (data as any).vehicles = [];
      }
      
      console.log("Orçamento recuperado:", data);
    }
    
    return { success: true, quote: data };
  } catch (error) {
    console.error("Erro inesperado ao buscar orçamento por ID:", error);
    return { success: false, error };
  }
}

export const addVehicleToQuote = async (quoteId: string, vehicleData: any): Promise<{ success: boolean; data?: any; error?: any }> => {
  try {
    // Verificar se o veículo já existe
    let vehicleId = vehicleData.vehicle_id;
    
    if (!vehicleId && vehicleData.vehicle) {
      // Se não tiver ID mas tiver objeto de veículo, verificar se já existe ou criar
      const vehicle = vehicleData.vehicle;
      
      if (vehicle.plateNumber) {
        const { data: existingVehicles } = await supabase
          .from('vehicles')
          .select('id')
          .eq('plate_number', vehicle.plateNumber)
          .limit(1);
          
        if (existingVehicles && Array.isArray(existingVehicles) && existingVehicles.length > 0) {
          vehicleId = existingVehicles[0].id;
        }
      }
      
      // Se ainda não tiver ID, criar veículo
      if (!vehicleId) {
        const { data: newVehicle, error: vehicleError } = await supabase
          .from('vehicles')
          .insert({
            brand: vehicle.brand || 'Não especificado',
            model: vehicle.model || 'Não especificado',
            year: vehicle.year || new Date().getFullYear(),
            value: vehicle.value || 0,
            plate_number: vehicle.plateNumber || null,
            is_used: vehicle.isUsed || false,
            group_id: vehicle.groupId || null
          })
          .select()
          .single();
          
        if (vehicleError) {
          console.error('Erro ao criar veículo:', vehicleError);
          return { success: false, error: vehicleError };
        }
        
        vehicleId = newVehicle.id;
      }
    }
    
    if (!vehicleId) {
      return { success: false, error: { message: 'ID do veículo não fornecido' } };
    }
    
    // Adicionar veículo ao orçamento
    const { data, error } = await supabase
      .from('quote_vehicles')
      .insert({
        quote_id: quoteId,
        vehicle_id: vehicleId,
        monthly_value: vehicleData.monthly_value || 0,
        monthly_km: vehicleData.monthly_km,
        contract_months: vehicleData.contract_months,
        operation_severity: vehicleData.operation_severity,
        has_tracking: vehicleData.has_tracking
      })
      .select();

    if (error) {
      console.error('Erro ao adicionar veículo ao orçamento:', error);
      return { success: false, error };
    }

    return { success: true, data };
  } catch (error) {
    console.error('Erro inesperado ao adicionar veículo ao orçamento:', error);
    return { success: false, error };
  }
};

export const getQuoteVehicles = async (quoteId: string): Promise<{ success: boolean; vehicles?: any[]; error?: any }> => {
  try {
    console.log(`Buscando veículos para o orçamento ${quoteId}...`);
    
    const { data, error } = await supabase
      .from('quote_vehicles')
      .select(`
        *,
        vehicle:vehicle_id(*)
      `)
      .eq('quote_id', quoteId);

    if (error) {
      console.error('Erro ao buscar veículos do orçamento:', error);
      return { success: false, error, vehicles: [] };
    }
    
    const vehicles = data || [];
    console.log(`Encontrados ${vehicles.length} veículos para o orçamento ${quoteId}:`, vehicles);
    
    return { success: true, vehicles };
  } catch (error) {
    console.error('Erro inesperado ao buscar veículos do orçamento:', error);
    return { success: false, error, vehicles: [] };
  }
};
